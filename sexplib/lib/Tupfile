include_rules

OCAMLC_FLAGS += -pp 'cpp -traditional -undef'

##
## First version of rules, generated by hand
##

## First, generate auto-generated sources
## : foreach *.mll |> ocamllex -q %f |> %B.ml
## : foreach *.mly |> ocamlyacc %f |> %B.ml %B.mli

##  # Building library modules
##  # Note that rules are very similar, differ in order-defining deps only, and all order-defining deps are created by rules within this directory
##  # It would be nice to be able to specify some kind of "foreach" rule that captures general compilation command and then specify order-defining
##  # dependencies separately
##  : type.ml    |> !byte_io |> {cmo}
##
##  : parser.mli | type.cmi |> !byte_i |>
##  : parser.ml  | parser.cmi |> !byte_o |> {cmo}
##
##  : lexer.ml | parser.cmi |> !byte_io |> {cmo}
##
##  # It would be nice to avoid such manual management of flags and be able to set flags for one specific command only
##  OCAMLC_FLAGS_BAK = $(OCAMLC_FLAGS)
##  OCAMLC_FLAGS += -pp 'cpp -traditional -undef'
##  : pre_sexp.ml | lexer.cmi |> !byte_io |> {cmo}
##  OCAMLC_FLAGS = $(OCAMLC_FLAGS_BAK)
##
##  : sexp_intf.ml | pre_sexp.cmi |> !byte_io |> {cmo}
##
##  : sexp.mli | sexp_intf.cmi |> !byte_i |>
##  : sexp.ml  | sexp.cmi |> !byte_o |> {cmo}
##
##  : path.mli | sexp.cmi |> !byte_i |>
##  : path.ml  | path.cmi |> !byte_o |> {cmo}
##
##  : conv.mli | path.cmi sexp.cmi |> !byte_i |>
##  : conv.ml  | conv.cmi |> !byte_o |> {cmo}
##
##  : conv_error.ml | conv.cmi |> !byte_io |> {cmo}
##
##  : exn_magic.mli | path.cmi sexp.cmi conv.cmi |> !byte_i |>
##  : exn_magic.ml  | exn_magic.cmi conv.cmi |> !byte_o |> {cmo}
##
##  : std.ml | conv.cmi |> !byte_io |> {cmo}

## : {cmo} | conv_error.cmi std.cmi |> ocamlc -pack %f -o %o |> sexplib.cmo | sexplib.cmi
## : sexplib.cmo |> ocamlc -a %f -o %o |> sexplib.cma

## Now I would like to "install" .cma to $(LIBDIR)/sexplib/sexplib.cma, but apparently I can't create sexplib subdir on the fly :(

##
## End of first version of rules, generated by hand
##

# run orules # Generated rules do not work :(

## Copy-pasted rules work(?!)


: foreach *.mll |> ocamllex -q %f |> %B.ml
: foreach *.mly |> ocamlyacc %f |> %B.ml %B.mli

#: type.ml |> ocamlbuild -no-hygiene type.cmi type.cmo |> type.cmi type.cmo

: type.ml  |> !byte_io |> {cmos}
: parser.mli | type.cmo type.cmi |> !byte_i |>
: parser.ml | type.cmo type.cmi parser.cmi |> !byte_o |> {cmos}
: lexer.ml | type.cmo type.cmi parser.cmi parser.cmo |> !byte_io |> {cmos}
: pre_sexp.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi |> !byte_io |> {cmos}
: sexp_intf.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi |> !byte_io |> {cmos}
: sexp.mli | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi |> !byte_i |>
: path.mli | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi |> !byte_i |>
: exn_magic.mli | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi |> !byte_i |>
: conv.mli | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi |> !byte_i |>
: sexp.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi conv.cmi |> !byte_o |> {cmos}
: std.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi conv.cmi sexp.cmo |> !byte_io |> {cmos}
: path.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi conv.cmi sexp.cmo std.cmo std.cmi |> !byte_o |> {cmos}
: exn_magic.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi conv.cmi sexp.cmo std.cmo std.cmi path.cmo |> !byte_o |> {cmos}
: conv.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi conv.cmi sexp.cmo std.cmo std.cmi path.cmo exn_magic.cmo |> !byte_o |> {cmos}
: conv_error.ml | type.cmo type.cmi parser.cmi parser.cmo lexer.cmo lexer.cmi pre_sexp.cmo pre_sexp.cmi sexp_intf.cmo sexp_intf.cmi sexp.cmi path.cmi exn_magic.cmi conv.cmi sexp.cmo std.cmo std.cmi path.cmo exn_magic.cmo conv.cmo |> !byte_io |> {cmos}
: type.cmo parser.cmo lexer.cmo pre_sexp.cmo sexp.cmo sexp_intf.cmo path.cmo conv.cmo std.cmo exn_magic.cmo conv_error.cmo | *.cmi |> ocamlc -pack %f -o %o |> sexplib.cmo | sexplib.cmi
: sexplib.cmo |> ocamlc -a %f -o %o |> sexplib.cma

