include_rules

# First, generate auto-generated sources
: foreach *.mll |> ocamllex -q %f |> %B.ml
: foreach *.mly |> ocamlyacc %f |> %B.ml %B.mli

# Building library modules
# Note that rules are very similar, differ in order-defining deps only, and all order-defining deps are created by rules within this directory
# It would be nice to be able to specify some kind of "foreach" rule that captures general compilation command and then specify order-defining
# dependencies separately
: type.ml    |> !byte_io |> {cmo}

: parser.mli | type.cmi |> !byte_i |>
: parser.ml  | parser.cmi |> !byte_o |> {cmo}

: lexer.ml | parser.cmi |> !byte_io |> {cmo}

# It would be nice to avoid such manual management of flags and be able to set flags for one specific command only
OCAMLC_FLAGS_BAK = $(OCAMLC_FLAGS)
OCAMLC_FLAGS += -pp 'cpp -traditional -undef'
: pre_sexp.ml | lexer.cmi |> !byte_io |> {cmo}
OCAMLC_FLAGS = $(OCAMLC_FLAGS_BAK)

: sexp_intf.ml | pre_sexp.cmi |> !byte_io |> {cmo}

: sexp.mli | sexp_intf.cmi |> !byte_i |>
: sexp.ml  | sexp.cmi |> !byte_o |> {cmo}

: path.mli | sexp.cmi |> !byte_i |>
: path.ml  | path.cmi |> !byte_o |> {cmo}

: conv.mli | path.cmi sexp.cmi |> !byte_i |>
: conv.ml  | conv.cmi |> !byte_o |> {cmo}

: conv_error.ml | conv.cmi |> !byte_io |> {cmo}

: exn_magic.mli | path.cmi sexp.cmi conv.cmi |> !byte_i |>
: exn_magic.ml  | exn_magic.cmi conv.cmi |> !byte_o |> {cmo}

: std.ml | conv.cmi |> !byte_io |> {cmo}

: {cmo} | conv_error.cmi std.cmi |> ocamlc -pack %f -o %o |> sexplib.cmo | sexplib.cmi
: sexplib.cmo |> ocamlc -a %f -o %o |> sexplib.cma

# Now I would like to "install" .cma to $(LIBDIR)/sexplib/sexplib.cma, but apparently I can't create sexplib subdir on the fly :(
